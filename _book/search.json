[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hydroinformatics",
    "section": "",
    "text": "Welcome"
  },
  {
    "objectID": "index.html#how-to-use-these-materials",
    "href": "index.html#how-to-use-these-materials",
    "title": "Hydroinformatics",
    "section": "How to use these materials",
    "text": "How to use these materials\nAt the top of each chapter there is a link to a github repository. In each repository is the code that produces each chapter and a version where the code chunks within it are blank. These repositories are all template repositories, so you can easily copy them to your own github space by clicking Use This Template on the repo page.\nIn my class, I work through the each document, live coding with students following along.Typically I ask students to watch as I code and explain the chunk and then replicate it on their computer. Depending on the lesson, I will ask students to try some of the chunks before I show them the code as an in-class activity. Some chunks are explicitly designed for this purpose and are typically labeled a “challenge”.\nChapters called ACTIVITY are either homework or class-period-long in-class activities. The code chunks in these are therefore blank. If you would like a key for any of these, please just send me an email."
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#download-and-install-tidyverse-library",
    "href": "01-Plotting_Demo_COMPLETE.html#download-and-install-tidyverse-library",
    "title": "1  Intro to Plotting",
    "section": "1.1 Download and install tidyverse library",
    "text": "1.1 Download and install tidyverse library\nWe will use the tidyverse a lot this semester. It is a suite of packages that handles plotting and data wrangling efficiently.\nYou only have to install the library once. You have to load it using the library() function each time you start an R session.\n\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#library(webexercises)"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#reading-data",
    "href": "01-Plotting_Demo_COMPLETE.html#reading-data",
    "title": "1  Intro to Plotting",
    "section": "1.2 Reading data",
    "text": "1.2 Reading data\nThe following lines will read in the data we will use for this exercise. Don’t worry about this right now beyond running it, we will talk more about it later.\n\nPine &lt;- read_csv(\"PINE_Jan-Mar_2010.csv\") \n\nRows: 2160 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): StationID, surrogate\ndbl  (5): cfs, year, quarter, month, day\ndttm (1): datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nSNP &lt;- read_csv(\"PINE_NFDR_Jan-Mar_2010.csv\")\n\nRows: 4320 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): StationID, surrogate\ndbl  (5): cfs, year, quarter, month, day\ndttm (1): datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nRBI &lt;- read_csv(\"Flashy_Dat_Subset.csv\")\n\nRows: 49 Columns: 26\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): STANAME, STATE, CLASS, AGGECOREGION\ndbl (22): site_no, RBI, RBIrank, DRAIN_SQKM, HUC02, LAT_GAGE, LNG_GAGE, PPTA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nBasic ggplot syntax"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#our-first-ggplot",
    "href": "01-Plotting_Demo_COMPLETE.html#our-first-ggplot",
    "title": "1  Intro to Plotting",
    "section": "1.3 Our first ggplot",
    "text": "1.3 Our first ggplot\nLet’s look at the Pine data, plotting streamflow (the cfs column) by the date (datetime column). We will show the time series as a line.\n\nggplot(data = Pine, aes(x = datetime, y = cfs))+\n  geom_line()"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#change-point-type",
    "href": "01-Plotting_Demo_COMPLETE.html#change-point-type",
    "title": "1  Intro to Plotting",
    "section": "1.4 Change point type",
    "text": "1.4 Change point type\nNow let’s make the same plot but show the data as points, using the pch parameter in geom_point() we can change the point type to any of the following:\n\n\n\npch options from R help file\n\n\n\nggplot(data = Pine, aes(x = datetime, y = cfs))+\n  geom_point(pch = 8)"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#set-colors",
    "href": "01-Plotting_Demo_COMPLETE.html#set-colors",
    "title": "1  Intro to Plotting",
    "section": "1.5 Set colors",
    "text": "1.5 Set colors\nWe can also “easily” change the color. Easily is in quotes because this often trips people up. If you put color = “blue” in the aesthetic function, think about what that is telling ggplot. It says “control the color using”blue”“. That doesn’t make a whole lot of sense, so neither does the output… Try it.\nWhat happens is that if color = “blue” is in the aesthetic, you are telling R that the color used in the geom represents “blue”. This is very useful if you have multiple geoms in your plot, are coloring them differently, and are building a legend. But if you are just trying to color the points, it kind of feels like R is trolling you… doesn’t it?\nTake the color = “blue” out of the aesthetic and you’re golden.\n\nggplot(data = Pine, aes(datetime, y = cfs, color = \"blue\"))+\n  geom_point()\n\n\n\nggplot(data = Pine, aes(x = datetime, y = cfs))+\n  geom_point(color = \"blue\")"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#controlling-color-with-a-third-variable-and-other-functions",
    "href": "01-Plotting_Demo_COMPLETE.html#controlling-color-with-a-third-variable-and-other-functions",
    "title": "1  Intro to Plotting",
    "section": "1.6 Controlling color with a third variable and other functions",
    "text": "1.6 Controlling color with a third variable and other functions\nLet’s plot the data as a line again, but play with it a bit.\nFirst: make the line blue\nSecond: change the theme\nThird: change the axis labels\nFourth: color by discharge\n\nggplot(data = Pine, aes(x = datetime, y = cfs, color = cfs))+\n  geom_line()+\n  ylab(\"Discharge (cfs)\")+\n  xlab(element_blank())+\n  theme_classic()"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#plotting-multiple-groups",
    "href": "01-Plotting_Demo_COMPLETE.html#plotting-multiple-groups",
    "title": "1  Intro to Plotting",
    "section": "1.7 Plotting multiple groups",
    "text": "1.7 Plotting multiple groups\nThe SNP dataset has two different streams: Pine and NFDR\nWe can look at the two of those a couple of different ways\nFirst, make two lines, colored by the stream by adding color = to your aesthetic.\n\nggplot(data = SNP, aes(x = datetime,y = cfs, color = StationID)) +\n  geom_line()"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#facets",
    "href": "01-Plotting_Demo_COMPLETE.html#facets",
    "title": "1  Intro to Plotting",
    "section": "1.8 Facets",
    "text": "1.8 Facets\nWe can also use facets.\nYou must tell the facet_wrap what variable to use to make the separate panels (facet =). It’ll decide how to orient them or you can tell it how. We want them to be on top of each other so we are going to tell it we want 2 rows by setting nrow = 2. Note that we have to put the column used to make the facets in quotes after facets =\n\nggplot(data = SNP, aes(x = datetime,y = cfs)) +\n  geom_line() +\n  facet_wrap(facets = \"StationID\", nrow = 2)"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#two-variable-faceting",
    "href": "01-Plotting_Demo_COMPLETE.html#two-variable-faceting",
    "title": "1  Intro to Plotting",
    "section": "1.9 Two variable faceting",
    "text": "1.9 Two variable faceting\nYou can also use facet_grid() to break your plots up into panels based on two variables. Below we will create a panel for each month in each watershed. Adding scales = “free” allows facet_grid to change the axes. By default, all axes will be the same. This is often what we want, so we can more easily compare magnitudes, but sometimes we are looking for patterns more, so we may want to let the axes have whatever range works for the individual plots.\n\nggplot(data = SNP, aes(x = datetime,y = cfs)) +\n  geom_line() +\n  facet_grid(StationID ~ month, scales = \"free\")"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#boxplots",
    "href": "01-Plotting_Demo_COMPLETE.html#boxplots",
    "title": "1  Intro to Plotting",
    "section": "1.10 Boxplots",
    "text": "1.10 Boxplots\nWe can look at these data in other ways as well. A very useful way to look at the variation of two groups is to use a boxplot.\nBecause the data span several orders of magnitude, we will have to log the y axis to see the differences between the two streams. We do that by adding scale_y_log10()\n\nggplot(data = SNP, aes(x = StationID, y = cfs)) + \n  stat_boxplot()+\n  scale_y_log10()"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#more-about-color-size-etc",
    "href": "01-Plotting_Demo_COMPLETE.html#more-about-color-size-etc",
    "title": "1  Intro to Plotting",
    "section": "1.11 More about color, size, etc",
    "text": "1.11 More about color, size, etc\nLet’s play around a bit with controlling color, point size, etc with other data.\nWe can control the size of points by putting size = in the aes() and color by putting color =\nIf you use a point type that has a background, like #21, you can also set the background color using bg =\nIf points are too close together to see them all you can use a hollow point type or set the alpha lower so the points are transparent (alpha = )\n\nggplot(RBI, aes(RBI, DRAIN_SQKM, size = T_AVG_SITE, bg = STATE))+\n  geom_point(pch = 21, alpha = 0.3)"
  },
  {
    "objectID": "01-Plotting_Demo_COMPLETE.html#multiple-geoms",
    "href": "01-Plotting_Demo_COMPLETE.html#multiple-geoms",
    "title": "1  Intro to Plotting",
    "section": "1.12 Multiple geoms",
    "text": "1.12 Multiple geoms\nFinally: You can add multiple geoms to the same plot. Examples of when you might want to do this are when you are showing a line fit and want to show the points as well, or maybe showing a boxplot and want to show the data behind it. You simply add additional geom_… lines to add additional geoms.\n\nggplot(RBI, aes(RBI, DRAIN_SQKM, color = AGGECOREGION))+\n  stat_smooth(method = \"lm\", linetype = 2)+\n  geom_point()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#introduction",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#introduction",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.1 Introduction",
    "text": "2.1 Introduction\nWe have messed around with plotting a bit and you’ve seen a little of what R can do. So now let’s review or introduce you to some basics. Even if you have worked in R before, it is good to be remind of/practice with this stuff, so stay tuned in!\nThis exercise covers most of the same principles as two chapters in R for Data Science\nWorkflow: basics (https://r4ds.had.co.nz/workflow-basics.html)\nData transformation (https://r4ds.had.co.nz/transform.html)"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#you-can-use-r-as-a-calculator",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#you-can-use-r-as-a-calculator",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.2 You can use R as a calculator",
    "text": "2.2 You can use R as a calculator\nIf you just type numbers and operators in, R will spit out the results\n\n1 + 2\n\n[1] 3"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#you-can-create-new-objects-using--",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#you-can-create-new-objects-using--",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.3 You can create new objects using <-",
    "text": "2.3 You can create new objects using &lt;-\nYea yea, = does the same thing. But use &lt;-. We will call &lt;- assignment or assignment operator. When we are coding in R we use &lt;- to assign values to objects and = to set values for parameters in functions. Using &lt;- helps us differentiate between the two. Norms for formatting are important because they help us understand what code is doing, especially when stuff gets complex.\nOh, one more thing: Surround operators with spaces. Don’t code like a gorilla.\nx &lt;- 1 looks better than x&lt;-1 and if you disagree you are wrong. :)\nYou can assign single numbers or entire chunks of data using &lt;-\nSo if you had an object called my_data and wanted to copy it into my_new_data you could do:\nmy_new_data &lt;- my_data\nYou can then recall/print the values in an object by just typing the name by itself.\nIn the code chunk below, assign a 3 to the object “y” and then print it out.\n\ny &lt;- 3\ny\n\n[1] 3\n\n\nIf you want to assign multiple values, you have to put them in the function c() c means combine. R doesn’t know what to do if you just give it a bunch of values with space or commas, but if you put them as arguments in the combine function, it’ll make them into a vector.\nAny time you need to use several values, even passing as an argument to a function, you have to put them in c() or it won’t work.\n\na &lt;- c(1,2,3,4)\na\n\n[1] 1 2 3 4\n\n\nWhen you are creating objects, try to give them meaningful names so you can remember what they are. You can’t have spaces or operators that mean something else as part of a name. And remember, everything is case sensitive.\nAssign the value 5.4 to water_pH and then try to recall it by typing “water_ph”\n\nwater_pH &lt;- 5.4\n\n#water_ph\n\nYou can also set objects equal to strings, or values that have letters in them. To do this you just have to put the value in quotes, otherwise R will think it is an object name and tell you it doesn’t exist.\nTry: name &lt;- “JP” and then name &lt;- JP\nWhat happens if you forget the ending parenthesis?\nTry: name &lt;- “JP\nR can be cryptic with it’s error messages or other responses, but once you get used to them, you know exactly what is wrong when they pop up.\n\nname &lt;- \"JP\"\n#name &lt;- JP"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#using-functions",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#using-functions",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.4 Using functions",
    "text": "2.4 Using functions\n\nAs an example, let’s try the seq() function, which creates a sequence of numbers.\n\nseq(from = 1, to = 10, by = 1)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n#or\n\nseq(1, 10, 1)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n#or\n\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n#what does this do\nseq(10,1)\n\n [1] 10  9  8  7  6  5  4  3  2  1"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#read-in-some-data.",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#read-in-some-data.",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.5 Read in some data.",
    "text": "2.5 Read in some data.\nFor the following demonstration we will use the RBI data from a sample of USGS gages we used last class. First we will load the tidyverse library, everything we have done so far is in base R.\nImportant: read_csv() is the tidyverse csv reading function, the base R function is read.csv(). read.csv() will not read your data in as a tibble, which is the format used by tidyverse functions.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nrbi &lt;- read_csv(\"Flashy_Dat_Subset.csv\")\n\nRows: 49 Columns: 26\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): STANAME, STATE, CLASS, AGGECOREGION\ndbl (22): site_no, RBI, RBIrank, DRAIN_SQKM, HUC02, LAT_GAGE, LNG_GAGE, PPTA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#wait-hold-up.-what-is-a-tibble",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#wait-hold-up.-what-is-a-tibble",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.6 Wait, hold up. What is a tibble?",
    "text": "2.6 Wait, hold up. What is a tibble?\nGood question. It’s a fancy way to store data that works well with tidyverse functions. Let’s look at the rbi tibble.\n\nhead(rbi)\n\n# A tibble: 6 × 26\n  site_no    RBI RBIrank STANAME  DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS\n    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1 1013500 0.0584      35 Fish Ri…     2253.      1     47.2    -68.6 ME    Ref  \n2 1021480 0.208      300 Old Str…       76.7     1     44.9    -67.7 ME    Ref  \n3 1022500 0.198      286 Narragu…      574.      1     44.6    -67.9 ME    Ref  \n4 1029200 0.132      183 Seboeis…      445.      1     46.1    -68.6 ME    Ref  \n5 1030500 0.114      147 Mattawa…     3676.      1     45.5    -68.3 ME    Ref  \n6 1031300 0.297      489 Piscata…      304.      1     45.3    -69.6 ME    Ref  \n# ℹ 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;,\n#   PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;,\n#   T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;,\n#   T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;,\n#   PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;\n\n\nNow read in the same data with read.csv() which will NOT read the data as a tibble. How is it different? Output each one in the Console.\nKnowing the data type for each column is super helpful for a few reasons…. let’s talk about them.\nTypes: int, dbl, fctr, char, logical\n\nrbi_NT &lt;- read.csv(\"Flashy_Dat_Subset.csv\")\n\nhead(rbi_NT)\n\n  site_no        RBI RBIrank                                     STANAME\n1 1013500 0.05837454      35            Fish River near Fort Kent, Maine\n2 1021480 0.20797008     300               Old Stream near Wesley, Maine\n3 1022500 0.19805382     286     Narraguagus River at Cherryfield, Maine\n4 1029200 0.13151299     183         Seboeis River near Shin Pond, Maine\n5 1030500 0.11350485     147 Mattawamkeag River near Mattawamkeag, Maine\n6 1031300 0.29718786     489       Piscataquis River at Blanchard, Maine\n  DRAIN_SQKM HUC02 LAT_GAGE  LNG_GAGE STATE CLASS AGGECOREGION PPTAVG_BASIN\n1     2252.7     1 47.23739 -68.58264    ME   Ref    NorthEast        97.42\n2       76.7     1 44.93694 -67.73611    ME   Ref    NorthEast       115.39\n3      573.6     1 44.60797 -67.93524    ME   Ref    NorthEast       120.07\n4      444.9     1 46.14306 -68.63361    ME   Ref    NorthEast       102.19\n5     3676.2     1 45.50097 -68.30596    ME   Ref    NorthEast       108.19\n6      304.4     1 45.26722 -69.58389    ME   Ref    NorthEast       119.83\n  PPTAVG_SITE T_AVG_BASIN T_AVG_SITE T_MAX_BASIN T_MAXSTD_BASIN T_MAX_SITE\n1       93.53        3.00        3.0        9.67          0.202       10.0\n2      117.13        5.71        5.8       11.70          0.131       11.9\n3      129.56        5.95        6.3       11.90          0.344       12.2\n4      103.24        3.61        4.0        9.88          0.231       10.4\n5      113.13        4.82        5.4       10.75          0.554       11.7\n6      120.93        3.60        4.2        9.57          0.431       11.0\n  T_MIN_BASIN T_MINSTD_BASIN T_MIN_SITE   PET SNOW_PCT_PRECIP PRECIP_SEAS_IND\n1       -2.49          0.269       -2.7 504.7            36.9           0.102\n2       -0.85          0.123       -0.6 554.2            39.5           0.046\n3        0.06          0.873        1.4 553.1            38.2           0.047\n4       -2.13          0.216       -1.5 513.0            36.4           0.070\n5       -1.49          0.251       -1.2 540.8            37.2           0.033\n6       -2.46          0.268       -1.7 495.8            40.2           0.030\n  FLOWYRS_1990_2009 wy00_09\n1                20      10\n2                11      10\n3                20      10\n4                11      10\n5                20      10\n6                13      10"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#data-wrangling-in-dplyr",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#data-wrangling-in-dplyr",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.7 Data wrangling in dplyr",
    "text": "2.7 Data wrangling in dplyr\nIf you forget syntax or what the following functions do, here is an excellent cheat sheet: https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf\nWe will demo five functions below:\n\nfilter() - returns rows that meet specified conditions\narrange() - reorders rows\nselect() - pull out variables (columns)\nmutate() - create new variables (columns) or reformat existing ones\nsummarize() - collapse groups of values into summary stats\n\nWith all of these, the first argument is the data and then the arguments after that specify what you want the function to do."
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#filter",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#filter",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.8 Filter",
    "text": "2.8 Filter\nWrite an expression that returns data in rbi for the state of Maine (ME)\nOperators:\n== equal\n!= not equal\n&gt;= , &lt;= greater than or equal to, less than or equal to\n&gt;, &lt; greater than or less then\n%in% included in a list of values\n& and\n| or\n\nfilter(rbi, STATE == \"ME\")\n\n# A tibble: 13 × 26\n   site_no    RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS\n     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1013500 0.0584      35 Fish R…     2253.      1     47.2    -68.6 ME    Ref  \n 2 1021480 0.208      300 Old St…       76.7     1     44.9    -67.7 ME    Ref  \n 3 1022500 0.198      286 Narrag…      574.      1     44.6    -67.9 ME    Ref  \n 4 1029200 0.132      183 Seboei…      445.      1     46.1    -68.6 ME    Ref  \n 5 1030500 0.114      147 Mattaw…     3676.      1     45.5    -68.3 ME    Ref  \n 6 1031300 0.297      489 Piscat…      304.      1     45.3    -69.6 ME    Ref  \n 7 1031500 0.320      545 Piscat…      769       1     45.2    -69.3 ME    Ref  \n 8 1037380 0.318      537 Ducktr…       39       1     44.3    -69.1 ME    Ref  \n 9 1044550 0.242      360 Spence…      500.      1     45.3    -70.2 ME    Ref  \n10 1047000 0.344      608 Carrab…      909.      1     44.9    -70.0 ME    Ref  \n11 1054200 0.492      805 Wild R…      181       1     44.4    -71.0 ME    Ref  \n12 1055000 0.450      762 Swift …      251.      1     44.6    -70.6 ME    Ref  \n13 1057000 0.326      561 Little…      191.      1     44.3    -70.5 ME    Ref  \n# ℹ 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;,\n#   PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;,\n#   T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;,\n#   T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;,\n#   PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;\n\n\n\n2.8.1 Multiple conditions\nHow many gages are there in Maine with an rbi greater than 0.25\n\nfilter(rbi, STATE == \"ME\" & RBI &gt; 0.25)\n\n# A tibble: 7 × 26\n  site_no   RBI RBIrank STANAME   DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS\n    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1 1031300 0.297     489 Piscataq…       304.     1     45.3    -69.6 ME    Ref  \n2 1031500 0.320     545 Piscataq…       769      1     45.2    -69.3 ME    Ref  \n3 1037380 0.318     537 Ducktrap…        39      1     44.3    -69.1 ME    Ref  \n4 1047000 0.344     608 Carrabas…       909.     1     44.9    -70.0 ME    Ref  \n5 1054200 0.492     805 Wild Riv…       181      1     44.4    -71.0 ME    Ref  \n6 1055000 0.450     762 Swift Ri…       251.     1     44.6    -70.6 ME    Ref  \n7 1057000 0.326     561 Little A…       191.     1     44.3    -70.5 ME    Ref  \n# ℹ 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;,\n#   PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;,\n#   T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;,\n#   T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;,\n#   PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#arrange",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#arrange",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.9 Arrange",
    "text": "2.9 Arrange\nArrange sorts by a column in your dataset.\nSort the rbi data by the RBI column in ascending and then descending order\n\narrange(rbi, RBI)\n\n# A tibble: 49 × 26\n   site_no    RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS\n     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1305500 0.0464      18 SWAN R…       21.3     2     40.8    -73.0 NY    Non-…\n 2 1013500 0.0584      35 Fish R…     2253.      1     47.2    -68.6 ME    Ref  \n 3 1306460 0.0587      37 CONNET…       55.7     2     40.8    -73.2 NY    Non-…\n 4 1030500 0.114      147 Mattaw…     3676.      1     45.5    -68.3 ME    Ref  \n 5 1029200 0.132      183 Seboei…      445.      1     46.1    -68.6 ME    Ref  \n 6 1117468 0.172      244 BEAVER…       25.3     1     41.5    -71.6 RI    Ref  \n 7 1022500 0.198      286 Narrag…      574.      1     44.6    -67.9 ME    Ref  \n 8 1021480 0.208      300 Old St…       76.7     1     44.9    -67.7 ME    Ref  \n 9 1162500 0.213      311 PRIEST…       49.7     1     42.7    -72.1 MA    Ref  \n10 1117370 0.230      338 QUEEN …       50.5     1     41.5    -71.6 RI    Ref  \n# ℹ 39 more rows\n# ℹ 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;,\n#   PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;,\n#   T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;,\n#   T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;,\n#   PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;\n\narrange(rbi, desc(RBI))\n\n# A tibble: 49 × 26\n   site_no   RBI RBIrank STANAME  DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS\n     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1311500 0.856    1017 VALLEY …       18.1     2     40.7    -73.7 NY    Non-…\n 2 1054200 0.492     805 Wild Ri…      181       1     44.4    -71.0 ME    Ref  \n 3 1187300 0.487     800 HUBBARD…       53.9     1     42.0    -72.9 MA    Ref  \n 4 1105600 0.484     797 OLD SWA…       12.7     1     42.2    -70.9 MA    Non-…\n 5 1055000 0.450     762 Swift R…      251.      1     44.6    -70.6 ME    Ref  \n 6 1195100 0.430     744 INDIAN …       14.8     1     41.3    -72.5 CT    Ref  \n 7 1181000 0.420     732 WEST BR…      244.      1     42.2    -72.9 MA    Ref  \n 8 1350000 0.414     721 SCHOHAR…      612.      2     42.3    -74.4 NY    Ref  \n 9 1121000 0.404     710 MOUNT H…       70.3     1     41.8    -72.2 CT    Ref  \n10 1169000 0.395     688 NORTH R…      231.      1     42.6    -72.7 MA    Ref  \n# ℹ 39 more rows\n# ℹ 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;,\n#   PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;,\n#   T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;,\n#   T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;,\n#   PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#select",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#select",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.10 Select",
    "text": "2.10 Select\nThere are too many columns! You will often want to do this when you are manipulating the structure of your data and need to trim it down to only include what you will use.\nSelect Site name, state, and RBI from the rbi data\nNote they come back in the order you put them in in the function, not the order they were in in the original data.\nYou can do a lot more with select, especially when you need to select a bunch of columns but don’t want to type them all out. But we don’t need to cover all that today. For a taste though, if you want to select a group of columns you can specify the first and last with a colon in between (first:last) and it’ll return all of them. Select the rbi columns from site_no to DRAIN_SQKM.\n\nselect(rbi, STANAME, STATE, RBI)\n\n# A tibble: 49 × 3\n   STANAME                                      STATE    RBI\n   &lt;chr&gt;                                        &lt;chr&gt;  &lt;dbl&gt;\n 1 Fish River near Fort Kent, Maine             ME    0.0584\n 2 Old Stream near Wesley, Maine                ME    0.208 \n 3 Narraguagus River at Cherryfield, Maine      ME    0.198 \n 4 Seboeis River near Shin Pond, Maine          ME    0.132 \n 5 Mattawamkeag River near Mattawamkeag, Maine  ME    0.114 \n 6 Piscataquis River at Blanchard, Maine        ME    0.297 \n 7 Piscataquis River near Dover-Foxcroft, Maine ME    0.320 \n 8 Ducktrap River near Lincolnville, Maine      ME    0.318 \n 9 Spencer Stream near Grand Falls, Maine       ME    0.242 \n10 Carrabassett River near North Anson, Maine   ME    0.344 \n# ℹ 39 more rows\n\nselect(rbi, site_no:DRAIN_SQKM)\n\n# A tibble: 49 × 5\n   site_no    RBI RBIrank STANAME                                     DRAIN_SQKM\n     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                                            &lt;dbl&gt;\n 1 1013500 0.0584      35 Fish River near Fort Kent, Maine                2253. \n 2 1021480 0.208      300 Old Stream near Wesley, Maine                     76.7\n 3 1022500 0.198      286 Narraguagus River at Cherryfield, Maine          574. \n 4 1029200 0.132      183 Seboeis River near Shin Pond, Maine              445. \n 5 1030500 0.114      147 Mattawamkeag River near Mattawamkeag, Maine     3676. \n 6 1031300 0.297      489 Piscataquis River at Blanchard, Maine            304. \n 7 1031500 0.320      545 Piscataquis River near Dover-Foxcroft, Mai…      769  \n 8 1037380 0.318      537 Ducktrap River near Lincolnville, Maine           39  \n 9 1044550 0.242      360 Spencer Stream near Grand Falls, Maine           500. \n10 1047000 0.344      608 Carrabassett River near North Anson, Maine       909. \n# ℹ 39 more rows"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#mutate",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#mutate",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.11 Mutate",
    "text": "2.11 Mutate\nUse mutate to add new columns based on additional ones. Common uses are to create a column of data in different units, or to calculate something based on two columns. You can also use it to just update a column, by naming the new column the same as the original one (but be careful because you’ll lose the original one!). I commonly use this when I am changing the datatype of a column, say from a character to a factor or a string to a date.\nCreate a new column in rbi called T_RANGE by subtracting T_MIN_SITE from T_MAX_SITE\n\nmutate(rbi, T_RANGE = T_MAX_SITE - T_MIN_SITE)\n\n# A tibble: 49 × 27\n   site_no    RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS\n     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1013500 0.0584      35 Fish R…     2253.      1     47.2    -68.6 ME    Ref  \n 2 1021480 0.208      300 Old St…       76.7     1     44.9    -67.7 ME    Ref  \n 3 1022500 0.198      286 Narrag…      574.      1     44.6    -67.9 ME    Ref  \n 4 1029200 0.132      183 Seboei…      445.      1     46.1    -68.6 ME    Ref  \n 5 1030500 0.114      147 Mattaw…     3676.      1     45.5    -68.3 ME    Ref  \n 6 1031300 0.297      489 Piscat…      304.      1     45.3    -69.6 ME    Ref  \n 7 1031500 0.320      545 Piscat…      769       1     45.2    -69.3 ME    Ref  \n 8 1037380 0.318      537 Ducktr…       39       1     44.3    -69.1 ME    Ref  \n 9 1044550 0.242      360 Spence…      500.      1     45.3    -70.2 ME    Ref  \n10 1047000 0.344      608 Carrab…      909.      1     44.9    -70.0 ME    Ref  \n# ℹ 39 more rows\n# ℹ 17 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;,\n#   PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;,\n#   T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;,\n#   T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;,\n#   PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;,\n#   T_RANGE &lt;dbl&gt;\n\n\nWhen downloading data from the USGS through R, you have to enter the gage ID as a character, even though they are all made up of numbers. So to practice doing this, update the site_no column to be a character datatype\n\nmutate(rbi, site_no = as.character(site_no))\n\n# A tibble: 49 × 26\n   site_no    RBI RBIrank STANAME DRAIN_SQKM HUC02 LAT_GAGE LNG_GAGE STATE CLASS\n   &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1013500 0.0584      35 Fish R…     2253.      1     47.2    -68.6 ME    Ref  \n 2 1021480 0.208      300 Old St…       76.7     1     44.9    -67.7 ME    Ref  \n 3 1022500 0.198      286 Narrag…      574.      1     44.6    -67.9 ME    Ref  \n 4 1029200 0.132      183 Seboei…      445.      1     46.1    -68.6 ME    Ref  \n 5 1030500 0.114      147 Mattaw…     3676.      1     45.5    -68.3 ME    Ref  \n 6 1031300 0.297      489 Piscat…      304.      1     45.3    -69.6 ME    Ref  \n 7 1031500 0.320      545 Piscat…      769       1     45.2    -69.3 ME    Ref  \n 8 1037380 0.318      537 Ducktr…       39       1     44.3    -69.1 ME    Ref  \n 9 1044550 0.242      360 Spence…      500.      1     45.3    -70.2 ME    Ref  \n10 1047000 0.344      608 Carrab…      909.      1     44.9    -70.0 ME    Ref  \n# ℹ 39 more rows\n# ℹ 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;,\n#   PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;,\n#   T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;,\n#   T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;,\n#   PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#summarize",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#summarize",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.12 Summarize",
    "text": "2.12 Summarize\nSummarize will perform an operation on all of your data, or groups if you assign groups.\nUse summarize to compute the mean, min, and max rbi\n\nsummarize(rbi, meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI))\n\n# A tibble: 1 × 3\n  meanrbi maxrbi minrbi\n    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1   0.316  0.856 0.0464\n\n\nNow use the group function to group by state and then summarize in the same way as above\n\nrbistate &lt;- group_by(rbi, STATE)\nsummarize(rbistate, meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI))\n\n# A tibble: 7 × 4\n  STATE meanrbi maxrbi minrbi\n  &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 CT      0.366  0.430 0.295 \n2 MA      0.367  0.487 0.213 \n3 ME      0.269  0.492 0.0584\n4 NH      0.336  0.368 0.265 \n5 NY      0.342  0.856 0.0464\n6 RI      0.201  0.230 0.172 \n7 VT      0.299  0.365 0.231"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#multiple-operations-with-pipes",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#multiple-operations-with-pipes",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.13 Multiple operations with pipes",
    "text": "2.13 Multiple operations with pipes\nThe pipe operator %&gt;% allows you to perform multiple operations in a sequence without saving intermediate steps. Not only is this more efficient, but structuring operations with pipes is also more intuitive than nesting functions within functions (the other way you can do multiple operations).\n\n2.13.1 Let’s say we want to tell R to make a PB&J sandwich by using the pbbread(), jbread(), and joinslices() functions and the data “ingredients”. If we do this saving each step if would look like this:\n\nsando &lt;- pbbread(ingredients)\n\n\nsando &lt;- jbread(sando)\n\n\nsando &lt;- joinslices(sando)\n\n\n\n2.13.2 If we nest the functions together we get this\n\njoinslice(jbread(pbbread(ingredients)))\n\nEfficient… but tough to read/interpret\n\n\n2.13.3 Using the pipe it would look like this\n\ningredients %&gt;%\npbbread() %&gt;%\njbread() %&gt;%\njoinslices()\n\nMuch easier to follow!\n\n\n2.13.4 When you use the pipe, it basically takes whatever came out of the first function and puts it into the data argument for the next one\nso rbi %&gt;% group_by(STATE) is the same as group_by(rbi, STATE)\nTake the groupby and summarize code from above and perform the operation using the pipe\n\nrbi %&gt;%\n  group_by(STATE) %&gt;%\n  summarize(meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI))\n\n# A tibble: 7 × 4\n  STATE meanrbi maxrbi minrbi\n  &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 CT      0.366  0.430 0.295 \n2 MA      0.367  0.487 0.213 \n3 ME      0.269  0.492 0.0584\n4 NH      0.336  0.368 0.265 \n5 NY      0.342  0.856 0.0464\n6 RI      0.201  0.230 0.172 \n7 VT      0.299  0.365 0.231"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#save-your-results-to-a-new-tibble",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#save-your-results-to-a-new-tibble",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.14 Save your results to a new tibble",
    "text": "2.14 Save your results to a new tibble\nWe have just been writing everything to the screen so we can see what we are doing… In order to save anything we do with these functions to work with it later, we just have to use the assignment operator (&lt;-) to store the data.\nOne kind of awesome thing about the assignment operator is that it works both ways…\nx &lt;- 3 and 3 -&gt; x do the same thing (WHAT?!)\nSo you can do the assignment at the beginning of the end of your dplyr workings, whatever you like best.\nUse the assignment operator to save the summary table you just made.\n\nstateRBIs &lt;- rbi %&gt;%\n  group_by(STATE) %&gt;%\n  summarize(meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI))\n\n# Notice when you do this it doesn't output the result... \n# You can see what you did by clickon in stateRBIs in your environment panel\n# or just type stateRBIs\n\nstateRBIs\n\n# A tibble: 7 × 4\n  STATE meanrbi maxrbi minrbi\n  &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 CT      0.366  0.430 0.295 \n2 MA      0.367  0.487 0.213 \n3 ME      0.269  0.492 0.0584\n4 NH      0.336  0.368 0.265 \n5 NY      0.342  0.856 0.0464\n6 RI      0.201  0.230 0.172 \n7 VT      0.299  0.365 0.231"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#what-about-nas",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#what-about-nas",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.15 What about NAs?",
    "text": "2.15 What about NAs?\nWe will talk more about this when we discuss stats, but some operations will fail if there are NA’s in the data. If appropriate, you can tell functions like mean() to ignore NAs. You can also use drop_na() if you’re working with a tibble. But be aware if you use that and save the result, drop_na() gets rid of the whole row, not just the NA. Because what would you replace it with…. an NA?\n\nx &lt;- c(1,2,3,4,NA)\nmean(x, na.rm = TRUE)\n\n[1] 2.5"
  },
  {
    "objectID": "02-Programming_Basics_Demo_COMPLETE.html#what-are-some-things-you-think-ill-ask-you-to-do-for-the-activity-next-class",
    "href": "02-Programming_Basics_Demo_COMPLETE.html#what-are-some-things-you-think-ill-ask-you-to-do-for-the-activity-next-class",
    "title": "2  R Tidyverse Programming Basics",
    "section": "2.16 What are some things you think I’ll ask you to do for the activity next class?",
    "text": "2.16 What are some things you think I’ll ask you to do for the activity next class?"
  }
]